openapi: 3.0.3
info:
  contact:
    name: Ã€lex Grau Roca
    url: https://github.com/alexgrauroca
  description: |
    API documentation for the customer service.

    This service provides endpoints for customer registration and management.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Customer Service API
  version: 1.0.0
servers:
- description: Local server
  url: http://localhost:80
security:
- BearerAuth: []
tags:
- description: Operations related to customer registration and management
  name: Customers
paths:
  /v1.0/customers:
    post:
      description: Creates a new customer account with the provided information
      operationId: registerCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterCustomerRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterCustomerResponse"
          description: Customer registered successfully
        "400":
          content:
            application/json:
              examples:
                invalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
                validationError:
                  $ref: "#/components/examples/RegisterCustomerValidationError"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or validation error
        "409":
          content:
            application/json:
              examples:
                customerExists:
                  $ref: "#/components/examples/CustomerExists"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Customer already exists
        "500":
          $ref: "#/components/responses/InternalError"
      security: []
      summary: Register a new customer
      tags:
      - Customers
  /v1.0/customers/{customerID}:
    get:
      description: Returns the customer data. It can only be accessed by the customer
        itself
      operationId: getCustomer
      parameters:
      - description: Customer identifier
        explode: false
        in: path
        name: customerID
        required: true
        schema:
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: Customer retrieved successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
      - BearerAuth: []
      summary: Get a specific customer data
      tags:
      - Customers
components:
  examples:
    InvalidRequest:
      summary: Invalid JSON
      value:
        code: INVALID_REQUEST
        message: invalid request
        details: []
    RegisterCustomerValidationError:
      summary: Validation error
      value:
        code: VALIDATION_ERROR
        message: validation failed
        details:
        - email is required
        - password is required
        - name is required
        - address is required
        - city is required
        - postal_code is required
        - country_code is required
        - email must be a valid email address
        - password must be a valid password with at least 8 characters long
        - postal_code must be at least 5 characters long
        - country_code must be at least 2 characters long
        - name must not exceed 100 characters long
        - address must not exceed 100 characters long
        - city must not exceed 100 characters long
        - postal_code must not exceed 32 characters long
        - country_code must not exceed 2 characters long
    CustomerExists:
      summary: Customer already exists
      value:
        code: CUSTOMER_ALREADY_EXISTS
        message: customer already exists
        details: []
    InternalError:
      summary: Unexpected error
      value:
        code: INTERNAL_ERROR
        message: An unexpected error occurred
        details: []
    Unauthorized:
      summary: Authentication required
      value:
        code: UNAUTHORIZED
        message: Authentication is required to access this resource
        details: []
    Forbidden:
      summary: Access forbidden
      value:
        code: FORBIDDEN
        message: You do not have permission to access this resource
        details: []
    NotFound:
      summary: Resource not found
      value:
        code: NOT_FOUND
        message: Resource not found
        details: []
  responses:
    InternalError:
      content:
        application/json:
          examples:
            internalError:
              $ref: "#/components/examples/InternalError"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: Internal server error
    Unauthorized:
      content:
        application/json:
          examples:
            internalError:
              $ref: "#/components/examples/Unauthorized"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: Unauthorized
    Forbidden:
      content:
        application/json:
          examples:
            internalError:
              $ref: "#/components/examples/Forbidden"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: Forbidden
    NotFound:
      content:
        application/json:
          examples:
            internalError:
              $ref: "#/components/examples/NotFound"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: NotFound
  schemas:
    RegisterCustomerRequest:
      example:
        country_code: US
        password: strongpassword123
        address: 123 Main St
        city: New York
        name: John Doe
        postal_code: "10001"
        email: user@example.com
      properties:
        email:
          description: Customer's email address
          example: user@example.com
          format: email
          pattern: "^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$"
          type: string
        password:
          description: Password must be at least 8 characters long
          example: strongpassword123
          format: password
          minLength: 8
          type: string
          writeOnly: true
        name:
          description: Customer's full name
          example: John Doe
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: Customer's address
          example: 123 Main St
          maxLength: 100
          minLength: 1
          type: string
        city:
          description: Customer's city
          example: New York
          maxLength: 100
          minLength: 1
          type: string
        postal_code:
          description: Customer's postal code
          example: "10001"
          maxLength: 32
          minLength: 5
          type: string
        country_code:
          description: Customer's country code in ISO 3166-1 alpha-2 format
          example: US
          maxLength: 2
          minLength: 2
          type: string
      required:
      - address
      - city
      - country_code
      - email
      - name
      - password
      - postal_code
      type: object
    RegisterCustomerResponse:
      example:
        country_code: US
        address: 123 Main St
        city: New York
        name: John Doe
        created_at: 2025-01-01T00:00:00Z
        id: 507f1f77bcf86cd799439011
        postal_code: "10001"
        email: user@example.com
      properties:
        id:
          description: Unique customer identifier
          example: 507f1f77bcf86cd799439011
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        email:
          description: Customer's email address
          example: user@example.com
          format: email
          type: string
        name:
          description: Customer's full name
          example: John Doe
          type: string
        address:
          description: Customer's address
          example: 123 Main St
          maxLength: 100
          minLength: 1
          type: string
        city:
          description: Customer's city
          example: New York
          maxLength: 100
          minLength: 1
          type: string
        postal_code:
          description: Customer's postal code
          example: "10001"
          maxLength: 32
          minLength: 5
          type: string
        country_code:
          description: Customer's country code in ISO 3166-1 alpha-2 format
          example: US
          maxLength: 2
          minLength: 2
          type: string
        created_at:
          description: Account creation timestamp
          example: 2025-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - address
      - city
      - country_code
      - created_at
      - email
      - id
      - name
      - postal_code
      type: object
    ErrorResponse:
      example:
        code: VALIDATION_ERROR
        details:
        - email is required
        - password is required
        message: validation failed
      properties:
        code:
          description: Error code identifier
          example: VALIDATION_ERROR
          type: string
        message:
          description: Human-readable error message
          example: validation failed
          type: string
        details:
          description: Additional error details
          example:
          - email is required
          - password is required
          items:
            type: string
          type: array
      required:
      - code
      - message
      type: object
    Customer:
      example:
        country_code: US
        createdAt: 2024-01-01T12:00:00Z
        address: 123 Main St
        city: New York
        name: John Doe
        id: 507f1f77bcf86cd799439011
        postal_code: "10001"
        email: john.doe@example.com
        updatedAt: 2024-01-01T12:00:00Z
      properties:
        id:
          description: Unique customer identifier
          example: 507f1f77bcf86cd799439011
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        name:
          description: The full name of the customer
          example: John Doe
          type: string
        email:
          description: The email address of the customer
          example: john.doe@example.com
          format: email
          type: string
        address:
          description: Customer's address
          example: 123 Main St
          maxLength: 100
          minLength: 1
          type: string
        city:
          description: Customer's city
          example: New York
          maxLength: 100
          minLength: 1
          type: string
        postal_code:
          description: Customer's postal code
          example: "10001"
          maxLength: 32
          minLength: 5
          type: string
        country_code:
          description: Customer's country code in ISO 3166-1 alpha-2 format
          example: US
          maxLength: 2
          minLength: 2
          type: string
        createdAt:
          description: The timestamp when the customer was created
          example: 2024-01-01T12:00:00Z
          format: date-time
          type: string
        updatedAt:
          description: The timestamp when the customer was last updated
          example: 2024-01-01T12:00:00Z
          format: date-time
          type: string
      required:
      - address
      - city
      - country_code
      - createdAt
      - email
      - id
      - name
      - postal_code
      - updatedAt
      type: object
    Pagination:
      properties:
        total_items:
          description: Total number of elements across all pages
          example: 200
          type: integer
        total_pages:
          description: Total number of pages
          example: 10
          type: integer
        current_page:
          description: Current page number
          example: 1
          type: integer
        page_size:
          description: Number of elements per page
          example: 20
          type: integer
      required:
      - page
      - size
      - totalElements
      - totalPages
      type: object
    GetCustomerResponse:
      $ref: "#/components/schemas/Customer"
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint
      scheme: bearer
      type: http
