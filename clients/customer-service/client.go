// Package customerclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package customerclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code identifier
	Code string `json:"code"`

	// Details Additional error details
	Details *[]string `json:"details,omitempty"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// RegisterCustomerRequest defines model for RegisterCustomerRequest.
type RegisterCustomerRequest struct {
	// Address Customer's address
	Address string `json:"address"`

	// City Customer's city
	City string `json:"city"`

	// CountryCode Customer's country code in ISO 3166-1 alpha-2 format
	CountryCode string `json:"country_code"`

	// Email Customer's email address
	Email openapi_types.Email `json:"email"`

	// Name Customer's full name
	Name string `json:"name"`

	// Password Password must be at least 8 characters long
	Password *string `json:"password,omitempty"`

	// PostalCode Customer's postal code
	PostalCode string `json:"postal_code"`
}

// RegisterCustomerResponse defines model for RegisterCustomerResponse.
type RegisterCustomerResponse struct {
	// Address Customer's address
	Address string `json:"address"`

	// City Customer's city
	City string `json:"city"`

	// CountryCode Customer's country code in ISO 3166-1 alpha-2 format
	CountryCode string `json:"country_code"`

	// CreatedAt Account creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Email Customer's email address
	Email openapi_types.Email `json:"email"`

	// Id Unique customer identifier
	Id string `json:"id"`

	// Name Customer's full name
	Name string `json:"name"`

	// PostalCode Customer's postal code
	PostalCode string `json:"postal_code"`
}

// InternalError defines model for InternalError.
type InternalError = ErrorResponse

// RegisterCustomerJSONRequestBody defines body for RegisterCustomer for application/json ContentType.
type RegisterCustomerJSONRequestBody = RegisterCustomerRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RegisterCustomerWithBody request with any body
	RegisterCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterCustomer(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RegisterCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterCustomer(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRegisterCustomerRequest calls the generic RegisterCustomer builder with application/json body
func NewRegisterCustomerRequest(server string, body RegisterCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterCustomerRequestWithBody generates requests for RegisterCustomer with any type of body
func NewRegisterCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RegisterCustomerWithBodyWithResponse request with any body
	RegisterCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error)

	RegisterCustomerWithResponse(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error)
}

type RegisterCustomerSchema struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterCustomerResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r RegisterCustomerSchema) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterCustomerSchema) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RegisterCustomerWithBodyWithResponse request with arbitrary body returning *RegisterCustomerSchema
func (c *ClientWithResponses) RegisterCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error) {
	rsp, err := c.RegisterCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterCustomerSchema(rsp)
}

func (c *ClientWithResponses) RegisterCustomerWithResponse(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error) {
	rsp, err := c.RegisterCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterCustomerSchema(rsp)
}

// ParseRegisterCustomerSchema parses an HTTP response from a RegisterCustomerWithResponse call
func ParseRegisterCustomerSchema(rsp *http.Response) (*RegisterCustomerSchema, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterCustomerSchema{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
