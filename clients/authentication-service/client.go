// Package authclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package authclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for LoginCustomerResponseTokenType.
const (
	LoginCustomerResponseTokenTypeBearer LoginCustomerResponseTokenType = "Bearer"
)

// Defines values for RefreshCustomerResponseTokenType.
const (
	RefreshCustomerResponseTokenTypeBearer RefreshCustomerResponseTokenType = "Bearer"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code identifier
	Code string `json:"code"`

	// Details Additional error details
	Details *[]string `json:"details,omitempty"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// LoginCustomerRequest defines model for LoginCustomerRequest.
type LoginCustomerRequest struct {
	// Email Customer's email address
	Email openapi_types.Email `json:"email"`

	// Password Customer's password
	Password *string `json:"password,omitempty"`
}

// LoginCustomerResponse defines model for LoginCustomerResponse.
type LoginCustomerResponse struct {
	// AccessToken JWT access token for API authentication
	AccessToken string `json:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// RefreshToken Token used to obtain a new access token when it expires
	RefreshToken string `json:"refresh_token"`

	// TokenType Access token type
	TokenType LoginCustomerResponseTokenType `json:"token_type"`
}

// LoginCustomerResponseTokenType Access token type
type LoginCustomerResponseTokenType string

// RefreshCustomerRequest defines model for RefreshCustomerRequest.
type RefreshCustomerRequest struct {
	// AccessToken The expired JWT access token
	AccessToken string `json:"access_token"`

	// RefreshToken The refresh token to use
	RefreshToken string `json:"refresh_token"`
}

// RefreshCustomerResponse defines model for RefreshCustomerResponse.
type RefreshCustomerResponse struct {
	// AccessToken JWT access token for API authentication
	AccessToken string `json:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// RefreshToken Token used to obtain a new access token when it expires
	RefreshToken string `json:"refresh_token"`

	// TokenType Access token type
	TokenType RefreshCustomerResponseTokenType `json:"token_type"`
}

// RefreshCustomerResponseTokenType Access token type
type RefreshCustomerResponseTokenType string

// RegisterCustomerRequest defines model for RegisterCustomerRequest.
type RegisterCustomerRequest struct {
	// Email Customer's email address
	Email openapi_types.Email `json:"email"`

	// Name Customer's full name
	Name string `json:"name"`

	// Password Password must be at least 8 characters long
	Password *string `json:"password,omitempty"`
}

// RegisterCustomerResponse defines model for RegisterCustomerResponse.
type RegisterCustomerResponse struct {
	// CreatedAt Account creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Email Customer's email address
	Email openapi_types.Email `json:"email"`

	// Id Unique customer identifier
	Id string `json:"id"`

	// Name Customer's full name
	Name string `json:"name"`
}

// InternalError defines model for InternalError.
type InternalError = ErrorResponse

// LoginCustomerJSONRequestBody defines body for LoginCustomer for application/json ContentType.
type LoginCustomerJSONRequestBody = LoginCustomerRequest

// RefreshCustomerJSONRequestBody defines body for RefreshCustomer for application/json ContentType.
type RefreshCustomerJSONRequestBody = RefreshCustomerRequest

// RegisterCustomerJSONRequestBody defines body for RegisterCustomer for application/json ContentType.
type RegisterCustomerJSONRequestBody = RegisterCustomerRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginCustomerWithBody request with any body
	LoginCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginCustomer(ctx context.Context, body LoginCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshCustomerWithBody request with any body
	RefreshCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefreshCustomer(ctx context.Context, body RefreshCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterCustomerWithBody request with any body
	RegisterCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterCustomer(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginCustomer(ctx context.Context, body LoginCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshCustomer(ctx context.Context, body RefreshCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterCustomer(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginCustomerRequest calls the generic LoginCustomer builder with application/json body
func NewLoginCustomerRequest(server string, body LoginCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginCustomerRequestWithBody generates requests for LoginCustomer with any type of body
func NewLoginCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/customers/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRefreshCustomerRequest calls the generic RefreshCustomer builder with application/json body
func NewRefreshCustomerRequest(server string, body RefreshCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewRefreshCustomerRequestWithBody generates requests for RefreshCustomer with any type of body
func NewRefreshCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/customers/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterCustomerRequest calls the generic RegisterCustomer builder with application/json body
func NewRegisterCustomerRequest(server string, body RegisterCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterCustomerRequestWithBody generates requests for RegisterCustomer with any type of body
func NewRegisterCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/customers/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginCustomerWithBodyWithResponse request with any body
	LoginCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginCustomerSchema, error)

	LoginCustomerWithResponse(ctx context.Context, body LoginCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginCustomerSchema, error)

	// RefreshCustomerWithBodyWithResponse request with any body
	RefreshCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshCustomerSchema, error)

	RefreshCustomerWithResponse(ctx context.Context, body RefreshCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshCustomerSchema, error)

	// RegisterCustomerWithBodyWithResponse request with any body
	RegisterCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error)

	RegisterCustomerWithResponse(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error)
}

type LoginCustomerSchema struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginCustomerResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r LoginCustomerSchema) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginCustomerSchema) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshCustomerSchema struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefreshCustomerResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r RefreshCustomerSchema) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshCustomerSchema) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterCustomerSchema struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterCustomerResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r RegisterCustomerSchema) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterCustomerSchema) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginCustomerWithBodyWithResponse request with arbitrary body returning *LoginCustomerSchema
func (c *ClientWithResponses) LoginCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginCustomerSchema, error) {
	rsp, err := c.LoginCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginCustomerSchema(rsp)
}

func (c *ClientWithResponses) LoginCustomerWithResponse(ctx context.Context, body LoginCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginCustomerSchema, error) {
	rsp, err := c.LoginCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginCustomerSchema(rsp)
}

// RefreshCustomerWithBodyWithResponse request with arbitrary body returning *RefreshCustomerSchema
func (c *ClientWithResponses) RefreshCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshCustomerSchema, error) {
	rsp, err := c.RefreshCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshCustomerSchema(rsp)
}

func (c *ClientWithResponses) RefreshCustomerWithResponse(ctx context.Context, body RefreshCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshCustomerSchema, error) {
	rsp, err := c.RefreshCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshCustomerSchema(rsp)
}

// RegisterCustomerWithBodyWithResponse request with arbitrary body returning *RegisterCustomerSchema
func (c *ClientWithResponses) RegisterCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error) {
	rsp, err := c.RegisterCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterCustomerSchema(rsp)
}

func (c *ClientWithResponses) RegisterCustomerWithResponse(ctx context.Context, body RegisterCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterCustomerSchema, error) {
	rsp, err := c.RegisterCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterCustomerSchema(rsp)
}

// ParseLoginCustomerSchema parses an HTTP response from a LoginCustomerWithResponse call
func ParseLoginCustomerSchema(rsp *http.Response) (*LoginCustomerSchema, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginCustomerSchema{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRefreshCustomerSchema parses an HTTP response from a RefreshCustomerWithResponse call
func ParseRefreshCustomerSchema(rsp *http.Response) (*RefreshCustomerSchema, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshCustomerSchema{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefreshCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRegisterCustomerSchema parses an HTTP response from a RegisterCustomerWithResponse call
func ParseRegisterCustomerSchema(rsp *http.Response) (*RegisterCustomerSchema, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterCustomerSchema{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa627jNhZ+FYJbYH/U12SnmBFQoG7GnXE2l1nHmU4nzhq0dGyxlUiVpHKZwMC+277Y",
	"ghfZEi05niJpi+4A/mGLhzy3jx95jvyAQ55mnAFTEgcPGO5ImiVgvh/lUvEUxPCOSjsq8zQl4h4H6zFE",
	"EgEkukdghVr4hiQ5aOGQR6AlLy8m56fD8WxwMh4OXv80G34YXUwucAtHoAhNJA6urls4BSnJUk8IG5Ze",
	"rVp4xBQIRpKhEFxULbpkcJdBqCBCYEa3TRmdTYbjs8HJbDgen4+bLRgwlHurIR6GuRAQOTNuSEKjIwER",
	"MEVJ4kXHjaOwJFBnzvvByej17Gg8fD08m4wGJzuiQmuWLJkyhoUAGU/4L8DqbXESyIo0WzMe/jAeXryd",
	"Tc7/OTx73B4uENxlVECEhNOgjIaKcb/mIFW9XccX52c7zfnX5fBi8rghwinReo2Pp1SmRIVxVa0ZQuux",
	"bcXG79np6OJ0MDl626zXeInSYqGV1itAZpxJu322sBpypoCZMJAsS2hIFOWs+7PkzN961J/7lYAFDvDf",
	"upvt2i0mdKuatCEyjCElTRPtqOwa+bGz2XoQgQwFzbRhJkd2YSRB3IBwG2ujwNhaXSV4wJngGQhFrSs2",
	"rA/eymYS0mOIGjwvKOgt63zCATbpH0xG52fr7aruMz0ilaBsiVel1PjLD6KI6q8kcdu3kCxpuMKQEpog",
	"Kg12NIRxC2dEylsuosrj6xamClKjaMsI94AIQe717zVEfKPe5ilhbc1pZJ6AM6yQLrtuAG3AgRaEJsYu",
	"T60Bm7MuuLJB3qi+Xsvz+c8QKm3WCV9SVtB2aUdWs2VCsm16Me/vEtmgkSgSICvxxLkE8Z372Ql5ilt4",
	"wUVKFA7cujUpLOK9U+daqKxOKsHZshjqHxyW9ZVmpJSdAFuqGAcvfQNa+FZQBecsuceBEjn4gS3sXq+3",
	"R2ibdgIJQ5BypgqOrrp7/OMEWQlLoGjBBRq8GyGSq1jvEEsXlRDA/XE8fxPSc3o8uvw06p/RkRyx8Yvw",
	"aPTN6Jfsw/uj41edTqcahH5NFiyFyxmtMWxQNsoIWmgqmgKiDEkIOYsqUDj8ptczOmmap2WNmteWILCJ",
	"sjktmsJheTqXECHFEZ8rQhkiiMFtNUq3MTBElTuEqoCM3sRZeJB8+unDcfKRHSfhQdybH6hkvvz228dj",
	"Ytaf2cc7Y2JEWhiY9vUKfw9EgNBA2Vjinj22jSsI8UNUyVLFvDpMuuP+0Q2/G5STGNbHuw/Q50HiY7CI",
	"oXrP0OjIJTxZ3j8nI3vF/QsbfGGDPwEbLKlUIP7w8z8jSl8pcYD/fTWd3k6nnfb1199tvk6nnen09uGg",
	"tfqq7rbASAo7rVvkSYKMVNmyYx4z9JqbKxK5W6fZwXJX2puvJ++Ki2KaS4XmgIhCCRCp0EsUxkSQUIGQ",
	"KOHmmvFHX1tc6PbDRuNVXgBREM2Iqt0DPGcKGZmCEKQiaVbx/qB38KLd67d7/UmvF5jPx3IAIqKgrafW",
	"Zf93v5zSmrxfMvprDmjdpWgoX/R4u39wSOahB3vS/jRof+y1X02n7euvnwnmu5mFmpu089otU0ruNkp0",
	"xQdhLqi6v9CVn8WD5bFBrkyNPTe/fiiCevyjLdr9U82ypKVwiNBC8BSpGFCiL9EIWJRxyhR2JaY2Yu7R",
	"ZaxUZqtVyha8qKxJaFBpQ4f/+58E7tAbQXI05iHBLZyLxM2VQbe7pCrO5xoIXZLA3VKQXGi5rRJYn7kR",
	"D/MUmHIlGRfG4OpJbEpkGkJnyqZsElNZPECZ4Dc0Arn2TZolNm0uFiGpyGKBhNmJ7kDVj6sqOlPN9AkN",
	"we1O5+vpaLLlH8+ASZ6LEDpcLLtukuxqWX2aUWUQM6j6cOFMHrwb4Ra+ASFtEPqdXqen5+llSUZxgA87",
	"vc6hRXZswNC96Xd63cIr2TX5NBzCZR1fbDSDRKQaDgEqF0wWZ7t9VLr06a2ticlYPYpwUC3BsEU7SPU9",
	"j+73aL3s1y6praBX1b1lyNhrBB30es9lQ3PrxggimZsILvJEZ+8fexlS7UP5DbxHGlEV8VWr1Mqoadm+",
	"3/Q5mlq2NV2gTT/usxo4m87ddntl9aQ9M9uPpCzLFeIC3fhemkz0f1smvJbzPtk48jrGT+xnpSHdwi8s",
	"xuqWXm+KuoalO11sl3UDEQtjUmYIfRCQpcl/sREkvtaL+BTkOKOZhN4A0yRiCGirlsglZUtEUNFeLje3",
	"ffrxqr5nIqCGmv53pqCmCrcGI2d+TJcu4FGJmZL7vyQ3las3j6Iqldxfk6f891H7paY05xk8bX5VpR09",
	"/ExHlf+OaaeL1TdST+jcxHsN9dsZeA394k2h1+zbm3RtOdnMukem0ig4d3PxcxXkLVWxuWC7i7OGqC3V",
	"bMPLZ95q9fps1FvfQNmLe/vPaEYzMtav6IuM/D+w7t43Qlv3eo/s7HVDxx39flMh2+r8OMH1gIHwjn7Q",
	"n4/mX30mDMKt/4bshIH3V5In9K/pjyhPfxUt9p7HW03MWF2p2iy5ul7ppc1LdWlG/eItXL90r5T2Qbeb",
	"6LGYSxW87GG9jNPur3Fe0KRGeGLuXIpv2PaRXkPRFwpKTq2uV/8LAAD//zigvdovJAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
