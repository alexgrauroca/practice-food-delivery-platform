/*
Authentication Service API

API documentation for the authentication service.  This service provides endpoints for customer and staff registration and authentication. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterStaffRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterStaffRequest{}

// RegisterStaffRequest struct for RegisterStaffRequest
type RegisterStaffRequest struct {
	// Unique staff identifier
	StaffId string `json:"staff_id" validate:"regexp=^[0-9a-fA-F]{24}$"`
	// Staff's email address
	Email string `json:"email" validate:"regexp=^[\\\\w\\\\.-]+@[\\\\w\\\\.-]+\\\\.\\\\w{2,}$"`
	// Password must be at least 8 characters long
	Password string `json:"password"`
	// Staff's full name
	Name string `json:"name"`
}

type _RegisterStaffRequest RegisterStaffRequest

// NewRegisterStaffRequest instantiates a new RegisterStaffRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterStaffRequest(staffId string, email string, password string, name string) *RegisterStaffRequest {
	this := RegisterStaffRequest{}
	this.StaffId = staffId
	this.Email = email
	this.Password = password
	this.Name = name
	return &this
}

// NewRegisterStaffRequestWithDefaults instantiates a new RegisterStaffRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterStaffRequestWithDefaults() *RegisterStaffRequest {
	this := RegisterStaffRequest{}
	return &this
}

// GetStaffId returns the StaffId field value
func (o *RegisterStaffRequest) GetStaffId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StaffId
}

// GetStaffIdOk returns a tuple with the StaffId field value
// and a boolean to check if the value has been set.
func (o *RegisterStaffRequest) GetStaffIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaffId, true
}

// SetStaffId sets field value
func (o *RegisterStaffRequest) SetStaffId(v string) {
	o.StaffId = v
}

// GetEmail returns the Email field value
func (o *RegisterStaffRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *RegisterStaffRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *RegisterStaffRequest) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *RegisterStaffRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *RegisterStaffRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *RegisterStaffRequest) SetPassword(v string) {
	o.Password = v
}

// GetName returns the Name field value
func (o *RegisterStaffRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisterStaffRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisterStaffRequest) SetName(v string) {
	o.Name = v
}

func (o RegisterStaffRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterStaffRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["staff_id"] = o.StaffId
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *RegisterStaffRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"staff_id",
		"email",
		"password",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterStaffRequest := _RegisterStaffRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterStaffRequest)

	if err != nil {
		return err
	}

	*o = RegisterStaffRequest(varRegisterStaffRequest)

	return err
}

type NullableRegisterStaffRequest struct {
	value *RegisterStaffRequest
	isSet bool
}

func (v NullableRegisterStaffRequest) Get() *RegisterStaffRequest {
	return v.value
}

func (v *NullableRegisterStaffRequest) Set(val *RegisterStaffRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterStaffRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterStaffRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterStaffRequest(val *RegisterStaffRequest) *NullableRegisterStaffRequest {
	return &NullableRegisterStaffRequest{value: val, isSet: true}
}

func (v NullableRegisterStaffRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterStaffRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


