openapi: 3.0.3
info:
  contact:
    name: Ã€lex Grau Roca
    url: https://github.com/alexgrauroca
  description: |
    API documentation for the authentication service.

    This service provides endpoints for customer and staff registration and authentication.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Authentication Service API
  version: 1.0.0
servers:
- description: Local server
  url: http://localhost:80
security:
- BearerAuth: []
tags:
- description: Operations related to customer registration and authentication
  name: Customers
paths:
  /v1.0/customers/login:
    post:
      description: Authenticates a customer and returns access and refresh tokens
      operationId: loginCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCustomerRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginCustomerResponse"
          description: Login successful
        "400":
          content:
            application/json:
              examples:
                invalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
                validationError:
                  summary: Validation error
                  value:
                    code: VALIDATION_ERROR
                    message: validation failed
                    details:
                    - email is required
                    - password is required
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or validation error
        "401":
          content:
            application/json:
              examples:
                invalidCredentials:
                  $ref: "#/components/examples/InvalidCredentials"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid credentials
        "500":
          $ref: "#/components/responses/InternalError"
      security: []
      summary: Login as a customer
      tags:
      - Customers
  /v1.0/customers/refresh:
    post:
      description: Generates a new access token using a valid refresh token
      operationId: refreshCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshCustomerRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshCustomerResponse"
          description: New access token generated successfully
        "400":
          content:
            application/json:
              examples:
                invalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
                validationError:
                  summary: Validation error
                  value:
                    code: VALIDATION_ERROR
                    message: validation failed
                    details:
                    - access_token is required
                    - refresh_token is required
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or validation error
        "401":
          content:
            application/json:
              examples:
                invalidRefreshToken:
                  $ref: "#/components/examples/InvalidRefreshToken"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or expired refresh token
        "403":
          content:
            application/json:
              examples:
                tokenMismatch:
                  $ref: "#/components/examples/TokenMismatch"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Token mismatch
        "500":
          $ref: "#/components/responses/InternalError"
      security: []
      summary: Refresh access token
      tags:
      - Customers
  /v1.0/auth/customers:
    post:
      description: Creates a new customer account with the provided information
      operationId: registerCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterCustomerRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterCustomerResponse"
          description: Customer registered successfully
        "400":
          content:
            application/json:
              examples:
                invalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
                validationError:
                  summary: Validation error
                  value:
                    code: VALIDATION_ERROR
                    message: validation failed
                    details:
                    - email is required
                    - password is required
                    - name is required
                    - email must be a valid email address
                    - password must be a valid password with at least 8 characters
                      long
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or validation error
        "409":
          content:
            application/json:
              examples:
                customerExists:
                  $ref: "#/components/examples/CustomerExists"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Customer already exists
        "500":
          $ref: "#/components/responses/InternalError"
      security: []
      summary: Register a new customer
      tags:
      - Customers
  /v1.0/auth/customers/{customerID}:
    put:
      description: Returns the customer data updated. It can only be accessed by the
        customer itself
      operationId: updateCustomer
      parameters:
      - description: Customer identifier
        explode: false
        in: path
        name: customerID
        required: true
        schema:
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomerRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: Customer updated successfully
        "400":
          content:
            application/json:
              examples:
                invalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
                validationError:
                  $ref: "#/components/examples/UpdateCustomerValidationError"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid input or validation error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
      - BearerAuth: []
      summary: Update a specific customer data
      tags:
      - Customers
components:
  examples:
    InvalidRequest:
      summary: Invalid JSON
      value:
        code: INVALID_REQUEST
        message: invalid request
        details: []
    InvalidCredentials:
      summary: Invalid credentials
      value:
        code: INVALID_CREDENTIALS
        message: invalid credentials
        details: []
    InternalError:
      summary: Unexpected error
      value:
        code: INTERNAL_ERROR
        message: An unexpected error occurred
        details: []
    InvalidRefreshToken:
      summary: Invalid Refresh Token
      value:
        code: INVALID_REFRESH_TOKEN
        message: invalid or expired refresh token
        details: []
    TokenMismatch:
      summary: Token Mismatch
      value:
        code: TOKEN_MISMATCH
        message: token mismatch
        details: []
    CustomerExists:
      summary: Customer already exists
      value:
        code: CUSTOMER_ALREADY_EXISTS
        message: customer already exists
        details: []
    UpdateCustomerValidationError:
      summary: Validation error
      value:
        code: VALIDATION_ERROR
        message: validation failed
        details:
        - name is required
        - name must not exceed 100 characters long
    Unauthorized:
      summary: Authentication required
      value:
        code: UNAUTHORIZED
        message: Authentication is required to access this resource
        details: []
    TokenExpired:
      summary: Token expired
      value:
        code: TOKEN_EXPIRED
        message: Token has expired
        details: []
    Forbidden:
      summary: Access forbidden
      value:
        code: FORBIDDEN
        message: You do not have permission to access this resource
        details: []
    NotFound:
      summary: Resource not found
      value:
        code: NOT_FOUND
        message: Resource not found
        details: []
  responses:
    InternalError:
      content:
        application/json:
          examples:
            internalError:
              $ref: "#/components/examples/InternalError"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: Internal server error
    Unauthorized:
      content:
        application/json:
          examples:
            unauthorizedError:
              $ref: "#/components/examples/Unauthorized"
            tokenExpiredError:
              $ref: "#/components/examples/TokenExpired"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: Unauthorized
    Forbidden:
      content:
        application/json:
          examples:
            internalError:
              $ref: "#/components/examples/Forbidden"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: Forbidden
    NotFound:
      content:
        application/json:
          examples:
            internalError:
              $ref: "#/components/examples/NotFound"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      description: NotFound
  schemas:
    LoginCustomerRequest:
      example:
        password: strongpassword123
        email: user@example.com
      properties:
        email:
          description: Customer's email address
          example: user@example.com
          format: email
          type: string
        password:
          description: Customer's password
          example: strongpassword123
          format: password
          minLength: 8
          type: string
          writeOnly: true
      required:
      - email
      - password
      type: object
    LoginCustomerResponse:
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token: dGhpc2lzYXJlZnJlc2h0b2tlbg==
        token_type: Bearer
        expires_in: 3600
      properties:
        access_token:
          description: JWT access token for API authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          minLength: 1
          type: string
        refresh_token:
          description: Token used to obtain a new access token when it expires
          example: dGhpc2lzYXJlZnJlc2h0b2tlbg==
          minLength: 1
          type: string
        expires_in:
          description: Access token expiration time in seconds
          example: 3600
          minimum: 1
          type: integer
        token_type:
          description: Access token type
          enum:
          - Bearer
          example: Bearer
          type: string
      required:
      - access_token
      - expires_in
      - refresh_token
      - token_type
      type: object
    ErrorResponse:
      example:
        code: VALIDATION_ERROR
        details:
        - email is required
        - password is required
        message: validation failed
      properties:
        code:
          description: Error code identifier
          example: VALIDATION_ERROR
          type: string
        message:
          description: Human-readable error message
          example: validation failed
          type: string
        details:
          description: Additional error details
          example:
          - email is required
          - password is required
          items:
            type: string
          type: array
      required:
      - code
      - message
      type: object
    RefreshCustomerRequest:
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token: dGhpc2lzYXJlZnJlc2h0b2tlbg==
      properties:
        access_token:
          description: The expired JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          minLength: 1
          type: string
        refresh_token:
          description: The refresh token to use
          example: dGhpc2lzYXJlZnJlc2h0b2tlbg==
          minLength: 1
          type: string
      required:
      - access_token
      - refresh_token
      type: object
    RefreshCustomerResponse:
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token: dGhpc2lzYXJlZnJlc2h0b2tlbg==
        token_type: Bearer
        expires_in: 3600
      properties:
        access_token:
          description: JWT access token for API authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          minLength: 1
          type: string
        refresh_token:
          description: Token used to obtain a new access token when it expires
          example: dGhpc2lzYXJlZnJlc2h0b2tlbg==
          minLength: 1
          type: string
        expires_in:
          description: Access token expiration time in seconds
          example: 3600
          minimum: 1
          type: integer
        token_type:
          description: Access token type
          enum:
          - Bearer
          example: Bearer
          type: string
      required:
      - access_token
      - expires_in
      - refresh_token
      - token_type
      type: object
    RegisterCustomerRequest:
      example:
        password: strongpassword123
        name: John Doe
        customer_id: 507f1f77bcf86cd799439011
        email: user@example.com
      properties:
        customer_id:
          description: Unique customer identifier
          example: 507f1f77bcf86cd799439011
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        email:
          description: Customer's email address
          example: user@example.com
          format: email
          pattern: "^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$"
          type: string
        password:
          description: Password must be at least 8 characters long
          example: strongpassword123
          format: password
          minLength: 8
          type: string
          writeOnly: true
        name:
          description: Customer's full name
          example: John Doe
          maxLength: 100
          minLength: 1
          type: string
      required:
      - customer_id
      - email
      - name
      - password
      type: object
    RegisterCustomerResponse:
      example:
        name: John Doe
        created_at: 2025-01-01T00:00:00Z
        id: 507f1f77bcf86cd799439011
        email: user@example.com
      properties:
        id:
          description: Unique customer identifier in the auth service
          example: 507f1f77bcf86cd799439011
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        email:
          description: Customer's email address
          example: user@example.com
          format: email
          type: string
        name:
          description: Customer's full name
          example: John Doe
          type: string
        created_at:
          description: Account creation timestamp
          example: 2025-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - created_at
      - email
      - id
      - name
      type: object
    UpdateCustomerRequest:
      example:
        name: John Doe
      properties:
        name:
          description: Customer's full name
          example: John Doe
          maxLength: 100
          minLength: 1
          type: string
      required:
      - name
      type: object
    Customer:
      example:
        updated_at: 2025-01-01T00:00:00Z
        name: John Doe
        created_at: 2025-01-01T00:00:00Z
        id: 507f1f77bcf86cd799439011
        email: user@example.com
      properties:
        id:
          description: Unique customer identifier in the auth service
          example: 507f1f77bcf86cd799439011
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        email:
          description: Customer's email address
          example: user@example.com
          format: email
          type: string
        name:
          description: Customer's full name
          example: John Doe
          type: string
        created_at:
          description: Account creation timestamp
          example: 2025-01-01T00:00:00Z
          format: date-time
          type: string
        updated_at:
          description: Account last update timestamp
          example: 2025-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - created_at
      - email
      - id
      - name
      - updated_at
      type: object
    UpdateCustomerResponse:
      $ref: "#/components/schemas/Customer"
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint
      scheme: bearer
      type: http
