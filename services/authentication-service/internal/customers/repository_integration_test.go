//go:build integration

package customers_test

import (
	"context"
	"fmt"
	"math/rand"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.uber.org/zap"

	"github.com/alexgrauroca/practice-food-delivery-platform/services/authentication-service/internal/clock"
	"github.com/alexgrauroca/practice-food-delivery-platform/services/authentication-service/internal/config"
	"github.com/alexgrauroca/practice-food-delivery-platform/services/authentication-service/internal/customers"
)

var now = time.Date(2025, 1, 1, 0, 0, 0, 0, time.UTC)

type customersRepositoryTestCase[P, W any] struct {
	name            string
	insertDocuments func(t *testing.T, coll *mongo.Collection)
	params          P
	want            W
	wantErr         error
}

func TestRepository_CreateCustomer(t *testing.T) {
	tests := []customersRepositoryTestCase[customers.CreateCustomerParams, customers.Customer]{
		{
			name: "when exists an active customer with the same email, it should return a customer already exists error",
			insertDocuments: func(t *testing.T, coll *mongo.Collection) {
				insertTestCustomer(t, coll, "test@example.com", "John Doe", "fakehashedpassword", true)
			},
			params: customers.CreateCustomerParams{
				Email:    "test@example.com",
				Password: "ValidPassword123",
				Name:     "John Doe",
			},
			want:    customers.Customer{},
			wantErr: customers.ErrCustomerAlreadyExists,
		},
		{
			name: "when the customer is created successfully, it should return the created customer",
			params: customers.CreateCustomerParams{
				Email:    "test@example.com",
				Password: "ValidPassword123",
				Name:     "John Doe",
			},
			want: customers.Customer{
				Email:     "test@example.com",
				Name:      "John Doe",
				Active:    true,
				Password:  "ValidPassword123",
				CreatedAt: now,
				UpdatedAt: now,
			},
			wantErr: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			db, cleanup := setupTestDB(t)
			defer cleanup()

			coll := setupTestCustomersCollection(t, db)
			if tt.insertDocuments != nil {
				tt.insertDocuments(t, coll)
			}

			repo := customers.NewRepository(zap.NewNop(), db, clock.FixedClock{FixedTime: now})
			got, err := repo.CreateCustomer(context.Background(), tt.params)

			// Error assertion
			assert.ErrorIs(t, err, tt.wantErr)

			// Validating the got only if there is no error expected
			if tt.wantErr == nil {
				// As the ID is generated by MongoDB, we just check that it is not empty
				assert.NotEmpty(t, got.ID, "ID should not be empty")

				// Doing this as in that way, I can do a direct equal assertion between the want ant got
				tt.want.ID = got.ID
				assert.Equal(t, tt.want, got)
			}
		})
	}
}

func TestRepository_CreateCustomer_UnexpectedFailure(t *testing.T) {
	db, cleanup := setupTestDB(t)
	repo := customers.NewRepository(zap.NewNop(), db, clock.FixedClock{FixedTime: now})

	// Simulating an unexpected failure by closing the opened connection
	cleanup()

	_, err := repo.CreateCustomer(context.Background(), customers.CreateCustomerParams{})
	assert.Error(t, err, "Expected an error due to unexpected failure")
	assert.NotErrorIs(t, err, customers.ErrCustomerAlreadyExists)
}

func TestRepository_FindByEmail(t *testing.T) {
	tests := []customersRepositoryTestCase[string, customers.Customer]{
		{
			name: "when there is not an active customer with the email, it should return a customer not found error",
			insertDocuments: func(t *testing.T, coll *mongo.Collection) {
				insertTestCustomer(t, coll, "test@example.com", "John Doe", "fakehashedpassword", false)
			},
			params:  "test@example.com",
			want:    customers.Customer{},
			wantErr: customers.ErrCustomerNotFound,
		},
		{
			name: "when there is an active customer with the email, it should return the customer",
			insertDocuments: func(t *testing.T, coll *mongo.Collection) {
				insertTestCustomer(t, coll, "test2@example.com", "John Doe", "fakehashedpassword", true)
			},
			params: "test2@example.com",
			want: customers.Customer{
				Email:     "test2@example.com",
				Name:      "John Doe",
				Active:    true,
				Password:  "fakehashedpassword",
				CreatedAt: now,
				UpdatedAt: now,
			},
			wantErr: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			db, cleanup := setupTestDB(t)
			defer cleanup()

			coll := setupTestCustomersCollection(t, db)
			if tt.insertDocuments != nil {
				tt.insertDocuments(t, coll)
			}

			repo := customers.NewRepository(zap.NewNop(), db, clock.FixedClock{FixedTime: now})
			got, err := repo.FindByEmail(context.Background(), tt.params)

			// Error assertion
			assert.ErrorIs(t, err, tt.wantErr)

			// Validating the got only if there is no error expected
			if tt.wantErr == nil {
				// As the ID is generated by MongoDB, we just check that it is not empty
				assert.NotEmpty(t, got.ID, "ID should not be empty")

				tt.want.ID = got.ID
				assert.Equal(t, tt.want, got)
			}
		})
	}
}

func TestRepository_FindByEmail_UnexpectedFailure(t *testing.T) {
	db, cleanup := setupTestDB(t)
	repo := customers.NewRepository(zap.NewNop(), db, clock.FixedClock{FixedTime: now})

	// Simulating an unexpected failure by closing the opened connection
	cleanup()

	_, err := repo.FindByEmail(context.Background(), "")
	assert.Error(t, err, "Expected an error due to unexpected failure")
	assert.NotErrorIs(t, err, customers.ErrCustomerNotFound)
}

func setupTestDB(t *testing.T) (*mongo.Database, func()) {
	logger := zap.NewNop()
	mongoCfg, err := config.LoadMongoConfig(logger)
	if err != nil {
		t.Fatalf("Failed to load MongoDB configuration: %v", err)
	}

	clientOpts := options.Client().ApplyURI(mongoCfg.URI)
	if mongoCfg.User != "" && mongoCfg.Password != "" {
		clientOpts.SetAuth(options.Credential{
			Username: mongoCfg.User,
			Password: mongoCfg.Password,
		})
	}

	// Context with timeout for connection
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	client, err := mongo.Connect(ctx, clientOpts)
	if err != nil {
		t.Fatalf("Failed to connect to MongoDB: %v", err)
	}
	// Setting up a unique database name for each test to avoid conflicts
	dbName := fmt.Sprintf("customers_test_authentication_service_%d_%d", time.Now().UnixNano(), rand.Intn(10000))
	db := client.Database(dbName)
	cleanup := func() {
		if err := db.Drop(ctx); err != nil {
			t.Fatalf("Failed to drop MongoDB collection: %v", err)
			return
		}
		if err := client.Disconnect(ctx); err != nil {
			t.Fatalf("Failed to disconnect MongoDB client: %v", err)
			return
		}
		cancel()
	}
	return db, cleanup
}

func setupTestCustomersCollection(t *testing.T, db *mongo.Database) *mongo.Collection {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	coll := db.Collection(customers.CollectionName)

	// Create unique index on email
	indexModel := mongo.IndexModel{
		Keys: bson.D{{Key: customers.FieldEmail, Value: 1}},
		Options: options.Index().
			SetUnique(true).
			SetPartialFilterExpression(bson.D{{Key: customers.FieldActive, Value: true}}),
	}
	if _, err := coll.Indexes().CreateOne(ctx, indexModel); err != nil {
		t.Fatalf("Failed to create unique index: %v", err)
	}

	return coll
}

func insertTestCustomer(t *testing.T, coll *mongo.Collection, email, name, password string, active bool) {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	doc := bson.M{
		"email":      email,
		"name":       name,
		"password":   password,
		"created_at": now,
		"updated_at": now,
		"active":     active,
	}
	if _, err := coll.InsertOne(ctx, doc); err != nil {
		t.Fatalf("Failed to insert test customer: %v", err)
	}
}
