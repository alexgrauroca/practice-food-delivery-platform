openapi: 3.0.3
info:
  title: Authentication Service API
  version: 1.0.0
  description: API documentation for the authentication service.

tags:
  - name: Customers
    description: Operations related to customer registration and authentication

servers:
  - url: http://localhost:80
    description: Local server

paths:
  /v1.0/customers/register:
    post:
      summary: Register a new customer
      operationId: registerCustomer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
      responses:
        '201':
          description: Customer registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterCustomerResponse'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid JSON
                  value:
                    code: INVALID_REQUEST
                    message: invalid request
                    details: [ ]
                validationError:
                  summary: Validation error
                  value:
                    code: VALIDATION_ERROR
                    message: validation failed
                    details:
                      - email is required
                      - password is required
                      - name is required
                      - email must be a valid email address
                      - password must be a valid password with at least 8 characters long
        '409':
          description: Customer already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                customerExists:
                  summary: Customer already exists
                  value:
                    code: CUSTOMER_ALREADY_EXISTS
                    message: customer already exists
                    details: [ ]
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                customerExists:
                  summary: Unexpected error
                  value:
                    code: INTERNAL_ERROR
                    message: failed to register the customer
                    details: [ ]
  /v1.0/customers/login:
    post:
      summary: Login as a customer
      operationId: loginCustomer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCustomerRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginCustomerResponse'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid JSON
                  value:
                    code: INVALID_REQUEST
                    message: invalid request
                    details: [ ]
                validationError:
                  summary: Validation error
                  value:
                    code: VALIDATION_ERROR
                    message: validation failed
                    details:
                      - email is required
                      - password is required
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Invalid credentials
                  value:
                    code: INVALID_CREDENTIALS
                    message: invalid credentials
                    details: [ ]
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary: Unexpected error
                  value:
                    code: INTERNAL_ERROR
                    message: failed to login the customer
                    details: [ ]
components:
  schemas:
    RegisterCustomerRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          pattern: '^[\w\.-]+@[\w\.-]+\.\w{2,}$'
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: strongpassword123
        name:
          type: string
          example: John Doe

    RegisterCustomerResponse:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9\-]+$'
          example: fake-id
        email:
          type: string
          format: email
          pattern: '^[\w\.-]+@[\w\.-]+\.\w{2,}$'
          example: user@example.com
        name:
          type: string
          example: John Doe
        created_at:
          type: string
          format: date-time
          example: 2025-01-01T00:00:00Z

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: validation failed
        details:
          type: array
          items:
            type: string
          example:
            - email is required
            - password is required

    LoginCustomerRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: strongpassword123

    LoginCustomerResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmYWtlLWlkIiwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjg4ODg4ODg4LCJleHAiOjE2ODg4OTI0ODh9.abc123
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        token_type:
          type: string
          description: Token type
          example: Bearer