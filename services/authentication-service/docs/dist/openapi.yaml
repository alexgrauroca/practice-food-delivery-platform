openapi: 3.0.3
info:
  title: Authentication Service API
  version: 1.0.0
  description: |
    API documentation for the authentication service.

    This service provides endpoints for customer and staff registration and authentication.
  contact:
    name: Ã€lex Grau Roca
    url: https://github.com/alexgrauroca
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:80
    description: Local server
security:
  - BearerAuth: []
tags:
  - name: Customers
    description: Operations related to customer registration and authentication
paths:
  /v1.0/customers/register:
    post:
      summary: Register a new customer
      description: Creates a new customer account with the provided information
      operationId: registerCustomer
      tags:
        - Customers
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register-customer-request'
      responses:
        '201':
          description: Customer registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/register-customer-response'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
              examples:
                invalidRequest:
                  $ref: '#/components/examples/invalid-request'
                validationError:
                  summary: Validation error
                  value:
                    code: VALIDATION_ERROR
                    message: validation failed
                    details:
                      - email is required
                      - password is required
                      - name is required
                      - email must be a valid email address
                      - password must be a valid password with at least 8 characters long
        '409':
          description: Customer already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
              examples:
                customerExists:
                  $ref: '#/components/examples/customer-exists'
        '500':
          $ref: '#/components/responses/internal-error'
  /v1.0/customers/login:
    post:
      summary: Login as a customer
      description: Authenticates a customer and returns access and refresh tokens
      operationId: loginCustomer
      tags:
        - Customers
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login-customer-request'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login-customer-response'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
              examples:
                invalidRequest:
                  $ref: '#/components/examples/invalid-request'
                validationError:
                  summary: Validation error
                  value:
                    code: VALIDATION_ERROR
                    message: validation failed
                    details:
                      - email is required
                      - password is required
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
              examples:
                invalidCredentials:
                  $ref: '#/components/examples/invalid-credentials'
        '500':
          $ref: '#/components/responses/internal-error'
  /v1.0/customers/refresh:
    post:
      summary: Refresh access token
      description: Generates a new access token using a valid refresh token
      operationId: refreshCustomer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refresh-customer-request'
      responses:
        '200':
          description: New access token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refresh-customer-response'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
              examples:
                invalidRefreshToken:
                  $ref: '#/components/examples/invalid-refresh-token'
        '403':
          description: Token mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
              examples:
                tokenMismatch:
                  $ref: '#/components/examples/token-mismatch'
        '500':
          $ref: '#/components/responses/internal-error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint
  examples:
    invalid-request:
      summary: Invalid JSON
      value:
        code: INVALID_REQUEST
        message: invalid request
        details: []
    customer-exists:
      summary: Customer already exists
      value:
        code: CUSTOMER_ALREADY_EXISTS
        message: customer already exists
        details: []
    internal-error:
      summary: Unexpected error
      value:
        code: INTERNAL_ERROR
        message: An unexpected error occurred
        details: []
    invalid-credentials:
      summary: Invalid credentials
      value:
        code: INVALID_CREDENTIALS
        message: invalid credentials
        details: []
    invalid-refresh-token:
      summary: Invalid Refresh Token
      value:
        code: INVALID_REFRESH_TOKEN
        message: invalid or expired refresh token
        details: []
    token-mismatch:
      summary: Token Mismatch
      value:
        code: TOKEN_MISMATCH
        message: token mismatch
        details: []
    InvalidRequest:
      $ref: '#/components/examples/invalid-request'
    InvalidCredentials:
      $ref: '#/components/examples/invalid-credentials'
    CustomerExists:
      $ref: '#/components/examples/customer-exists'
    InternalError:
      $ref: '#/components/examples/internal-error'
    InvalidRefreshToken:
      $ref: '#/components/examples/invalid-refresh-token'
    TokenMismatch:
      $ref: '#/components/examples/token-mismatch'
  schemas:
    register-customer-request:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          pattern: ^[\w\.-]+@[\w\.-]+\.\w{2,}$
          description: Customer's email address
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          description: Password must be at least 8 characters long
          example: strongpassword123
          writeOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Customer's full name
          example: John Doe
    register-customer-response:
      type: object
      required:
        - id
        - email
        - name
        - created_at
      properties:
        id:
          type: string
          pattern: ^[a-zA-Z0-9\-]+$
          description: Unique customer identifier
          example: cust-123abc
        email:
          type: string
          format: email
          description: Customer's email address
          example: user@example.com
        name:
          type: string
          description: Customer's full name
          example: John Doe
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: '2025-01-01T00:00:00Z'
    error-response:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code identifier
          example: VALIDATION_ERROR
        message:
          type: string
          description: Human-readable error message
          example: validation failed
        details:
          type: array
          description: Additional error details
          items:
            type: string
          example:
            - email is required
            - password is required
    login-customer-request:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Customer's email address
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          description: Customer's password
          example: strongpassword123
          writeOnly: true
    login-customer-response:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
        - token_type
      properties:
        access_token:
          type: string
          description: JWT access token for API authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          minLength: 1
        refresh_token:
          type: string
          description: Token used to obtain a new access token when it expires
          example: dGhpc2lzYXJlZnJlc2h0b2tlbg==
          minLength: 1
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 3600
          minimum: 1
        token_type:
          type: string
          description: Access token type
          enum:
            - Bearer
          example: Bearer
    refresh-customer-request:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          description: The expired JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          minLength: 1
        refresh_token:
          type: string
          description: The refresh token to use
          example: dGhpc2lzYXJlZnJlc2h0b2tlbg==
          minLength: 1
    refresh-customer-response:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
        - token_type
      properties:
        access_token:
          type: string
          description: JWT access token for API authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          minLength: 1
        refresh_token:
          type: string
          description: Token used to obtain a new access token when it expires
          example: dGhpc2lzYXJlZnJlc2h0b2tlbg==
          minLength: 1
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 3600
          minimum: 1
        token_type:
          type: string
          description: Access token type
          enum:
            - Bearer
          example: Bearer
    RegisterCustomerRequest:
      $ref: '#/components/schemas/register-customer-request'
    LoginCustomerRequest:
      $ref: '#/components/schemas/login-customer-request'
    RefreshCustomerRequest:
      $ref: '#/components/schemas/refresh-customer-request'
    RegisterCustomerResponse:
      $ref: '#/components/schemas/register-customer-response'
    ErrorResponse:
      $ref: '#/components/schemas/error-response'
    LoginCustomerResponse:
      $ref: '#/components/schemas/login-customer-response'
    RefreshCustomerResponse:
      $ref: '#/components/schemas/refresh-customer-response'
  responses:
    internal-error:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-response'
          examples:
            internalError:
              $ref: '#/components/examples/internal-error'
    InternalError:
      $ref: '#/components/responses/internal-error'
