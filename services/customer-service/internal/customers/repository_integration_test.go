//go:build integration

package customers_test

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"

	"github.com/alexgrauroca/practice-food-delivery-platform/services/customer-service/internal/clock"
	"github.com/alexgrauroca/practice-food-delivery-platform/services/customer-service/internal/customers"
	"github.com/alexgrauroca/practice-food-delivery-platform/services/customer-service/internal/infraestructure/mongodb"
	"github.com/alexgrauroca/practice-food-delivery-platform/services/customer-service/internal/log"
)

type customersRepositoryTestCase[P, W any] struct {
	name            string
	insertDocuments func(t *testing.T, coll *mongo.Collection)
	params          P
	want            W
	wantErr         error
}

func TestRepository_CreateCustomer(t *testing.T) {
	now := time.Date(2025, 1, 1, 0, 0, 0, 0, time.UTC)
	logger, _ := log.NewTest()

	tests := []customersRepositoryTestCase[customers.CreateCustomerParams, customers.Customer]{
		{
			name: "when exists an active customer with the same email, " +
				"then it should return a customer already exists error",
			insertDocuments: func(t *testing.T, coll *mongo.Collection) {
				mongodb.InsertTestDocument(t, coll, customers.Customer{
					Email:       "test@example.com",
					Name:        "John Doe",
					Active:      true,
					Address:     "a valid address",
					City:        "a valid city",
					PostalCode:  "12345",
					CountryCode: "US",
					CreatedAt:   now,
					UpdatedAt:   now,
				})
			},
			params: customers.CreateCustomerParams{
				Email:       "test@example.com",
				Name:        "John Doe",
				Address:     "a valid address",
				City:        "a valid city",
				PostalCode:  "12345",
				CountryCode: "US",
			},
			want:    customers.Customer{},
			wantErr: customers.ErrCustomerAlreadyExists,
		},
		{
			name: "when the customer is created successfully, then it should return the created customer",
			params: customers.CreateCustomerParams{
				Email:       "test@example.com",
				Name:        "John Doe",
				Address:     "a valid address",
				City:        "a valid city",
				PostalCode:  "12345",
				CountryCode: "US",
			},
			want: customers.Customer{
				Email:       "test@example.com",
				Name:        "John Doe",
				Active:      true,
				Address:     "a valid address",
				City:        "a valid city",
				PostalCode:  "12345",
				CountryCode: "US",
				CreatedAt:   now,
				UpdatedAt:   now,
			},
			wantErr: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tdb := mongodb.NewTestDB(t)
			defer tdb.Close(t)

			coll := setupTestCustomersCollection(t, tdb.DB)
			if tt.insertDocuments != nil {
				tt.insertDocuments(t, coll)
			}

			repo := customers.NewRepository(logger, tdb.DB, clock.FixedClock{FixedTime: now})
			got, err := repo.CreateCustomer(context.Background(), tt.params)

			// Error assertion
			assert.ErrorIs(t, err, tt.wantErr)

			// Validating the got only if there is no error expected
			if tt.wantErr == nil {
				// As the ID is generated by MongoDB, we just check that it is not empty
				assert.NotEmpty(t, got.ID, "ID should not be empty")

				// Doing this as in that way, I can do a direct equal assertion between the want ant got
				tt.want.ID = got.ID
				assert.Equal(t, tt.want, got)
			}
		})
	}
}

func TestRepository_CreateCustomer_UnexpectedFailure(t *testing.T) {
	now := time.Date(2025, 1, 1, 0, 0, 0, 0, time.UTC)
	logger, _ := log.NewTest()

	tdb := mongodb.NewTestDB(t)
	repo := customers.NewRepository(logger, tdb.DB, clock.FixedClock{FixedTime: now})

	// Simulating an unexpected failure by closing the opened connection
	tdb.Close(t)

	_, err := repo.CreateCustomer(context.Background(), customers.CreateCustomerParams{})
	assert.Error(t, err, "Expected an error due to unexpected failure")
	assert.NotErrorIs(t, err, customers.ErrCustomerAlreadyExists)
}

func TestRepository_PurgeCustomer(t *testing.T) {
	now := time.Date(2025, 1, 1, 0, 0, 0, 0, time.UTC)
	logger, _ := log.NewTest()

	// Params is just string as id. We don't need want, so it will be any type
	tests := []customersRepositoryTestCase[string, any]{
		{
			name:    "when the customer does not exist, then it should an error XXXXXXXXXXXXXXXXX",
			params:  "test@example.com",
			wantErr: nil,
		},
		{
			name: "when the customer exist, then it should not return an error",
			insertDocuments: func(t *testing.T, coll *mongo.Collection) {
				mongodb.InsertTestDocument(t, coll, customers.Customer{
					Email:     "test@example.com",
					Active:    true,
					CreatedAt: now,
					UpdatedAt: now,
				})
			},
			params:  "test@example.com",
			wantErr: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tdb := mongodb.NewTestDB(t)
			defer tdb.Close(t)

			coll := setupTestCustomersCollection(t, tdb.DB)
			if tt.insertDocuments != nil {
				tt.insertDocuments(t, coll)
			}

			repo := customers.NewRepository(logger, tdb.DB, clock.FixedClock{FixedTime: now})
			err := repo.PurgeCustomer(context.Background(), tt.params)

			// Error assertion
			assert.ErrorIs(t, err, tt.wantErr)
		})
	}
}

func TestRepository_PurgeCustomer_UnexpectedFailure(t *testing.T) {
	now := time.Date(2025, 1, 1, 0, 0, 0, 0, time.UTC)
	logger, _ := log.NewTest()

	tdb := mongodb.NewTestDB(t)
	repo := customers.NewRepository(logger, tdb.DB, clock.FixedClock{FixedTime: now})

	// Simulating an unexpected failure by closing the opened connection
	tdb.Close(t)

	err := repo.PurgeCustomer(context.Background(), "")
	assert.Error(t, err, "Expected an error due to unexpected failure")
	assert.NotErrorIs(t, err, customers.ErrCustomerAlreadyExists)
}

func setupTestCustomersCollection(t *testing.T, db *mongo.Database) *mongo.Collection {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	coll := db.Collection(customers.CollectionName)

	// Create unique index on email
	indexModel := mongo.IndexModel{
		Keys: bson.D{{Key: customers.FieldEmail, Value: 1}},
		Options: options.Index().
			SetUnique(true).
			SetPartialFilterExpression(bson.D{{Key: customers.FieldActive, Value: true}}),
	}
	if _, err := coll.Indexes().CreateOne(ctx, indexModel); err != nil {
		t.Fatalf("Failed to create unique index: %v", err)
	}

	return coll
}
